CREATE TABLE assigned_unit (
    id                 INTEGER NOT NULL,
    id_internalunit    INTEGER NOT NULL,
    id_company         INTEGER NOT NULL,
    id_superior_unit   INTEGER
);

ALTER TABLE assigned_unit ADD CONSTRAINT assigned_unit_pk PRIMARY KEY ( id );

CREATE SEQUENCE assigned_unit_id_seq;

CREATE TRIGGER assigned_unit_ai
BEFORE INSERT ON assigned_unit
FOR EACH ROW
BEGIN
  SELECT assigned_unit_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/

CREATE TABLE commune (
    id            INTEGER NOT NULL,
    name          VARCHAR2(255) NOT NULL,
    id_province   INTEGER NOT NULL
);

ALTER TABLE commune ADD CONSTRAINT commune_pk PRIMARY KEY ( id );

CREATE SEQUENCE commune_id_seq;

CREATE TRIGGER commune_ai
BEFORE INSERT ON commune
FOR EACH ROW
BEGIN
  SELECT commune_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE company (
    id               INTEGER NOT NULL,
    name             VARCHAR2(255) NOT NULL,
    address          NVARCHAR2(255) NOT NULL,
    logo             BLOB,
    id_workingarea   INTEGER NOT NULL,
    id_commune       INTEGER NOT NULL
);

ALTER TABLE company ADD CONSTRAINT company_pk PRIMARY KEY ( id );

CREATE SEQUENCE company_id_seq;

CREATE TRIGGER company_ai
BEFORE INSERT ON company
FOR EACH ROW
BEGIN
  SELECT company_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/

CREATE TABLE day_of_week (
    id     INTEGER NOT NULL,
    name   NVARCHAR2(12) NOT NULL
);

ALTER TABLE day_of_week ADD CONSTRAINT day_of_week_pk PRIMARY KEY ( id );

CREATE SEQUENCE day_of_week_id_seq;

CREATE TRIGGER day_of_week_ai
BEFORE INSERT ON day_of_week
FOR EACH ROW
BEGIN
  SELECT day_of_week_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE gender (
    id     INTEGER NOT NULL,
    name   VARCHAR2(20) NOT NULL
);

ALTER TABLE gender ADD CONSTRAINT gender_pk PRIMARY KEY ( id );

CREATE SEQUENCE gender_id_seq;

CREATE TRIGGER gender_ai
BEFORE INSERT ON gender
FOR EACH ROW
BEGIN
  SELECT gender_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE internal_unit (
    id        INTEGER NOT NULL,
    name      NVARCHAR2(255) NOT NULL,
    id_role   INTEGER NOT NULL
);

ALTER TABLE internal_unit ADD CONSTRAINT internal_unit_pk PRIMARY KEY ( id );

CREATE SEQUENCE internal_unit_id_seq;

CREATE TRIGGER internal_unit_ai
BEFORE INSERT ON internal_unit
FOR EACH ROW
BEGIN
  SELECT internal_unit_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE loop_task (
    id                   INTEGER NOT NULL,
    id_task_assignment   INTEGER NOT NULL,
    time                 DATE NOT NULL,
    isactive             CHAR(1) NOT NULL
);

ALTER TABLE loop_task ADD CONSTRAINT loop_task_pk PRIMARY KEY ( id );

CREATE SEQUENCE loop_task_id_seq;

CREATE TRIGGER loop_task_ai
BEFORE INSERT ON loop_task
FOR EACH ROW
BEGIN
  SELECT loop_task_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE loop_task_schedule (
    id             INTEGER NOT NULL,
    id_loop_task   INTEGER NOT NULL,
    id_dayofweek   INTEGER,
    dayofmonth     INTEGER,
    numberofweek   INTEGER,
    id_month       INTEGER
);

ALTER TABLE loop_task_schedule ADD CONSTRAINT loop_task_schedule_pk PRIMARY KEY ( id );

CREATE SEQUENCE loop_task_schedule_id_seq;

CREATE TRIGGER loop_task_schedule_ai
BEFORE INSERT ON loop_task_schedule
FOR EACH ROW
BEGIN
  SELECT loop_task_schedule_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE month (
    id     INTEGER NOT NULL,
    name   NVARCHAR2(12) NOT NULL
);

ALTER TABLE month ADD CONSTRAINT month_pk PRIMARY KEY ( id );

CREATE SEQUENCE month_id_seq;

CREATE TRIGGER month_ai
BEFORE INSERT ON month
FOR EACH ROW
BEGIN
  SELECT month_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE permission (
    id            INTEGER NOT NULL,
    name          NVARCHAR2(250) NOT NULL,
    description   NVARCHAR2(500)
);

ALTER TABLE permission ADD CONSTRAINT permissions_pk PRIMARY KEY ( id );

CREATE SEQUENCE permission_id_seq;

CREATE TRIGGER permission_ai
BEFORE INSERT ON permission
FOR EACH ROW
BEGIN
  SELECT permission_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE processed_task (
    id                        INTEGER NOT NULL,
    commentary                NVARCHAR2(512),
    assignationdate           DATE NOT NULL,
    enddate                   DATE NOT NULL,
    id_superiorassignedtask   INTEGER,
    id_taskstatus             INTEGER NOT NULL,
    id_dependenttask          INTEGER,
    id_task_assignment        INTEGER NOT NULL,
    id_scheduled_looptask     INTEGER
);

CREATE UNIQUE INDEX processed_task__idx ON
    processed_task (
        id_scheduled_looptask
    ASC );

ALTER TABLE processed_task ADD CONSTRAINT assigned_task_pk PRIMARY KEY ( id );

CREATE SEQUENCE processed_task_id_seq;

CREATE TRIGGER processed_task_ai
BEFORE INSERT ON processed_task
FOR EACH ROW
BEGIN
  SELECT processed_task_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE processed_task_history (
    id                    INTEGER NOT NULL,
    id_assignedtask       INTEGER NOT NULL,
    description           NVARCHAR2(512) NOT NULL,
    eventdatetime         DATE NOT NULL,
    justification         NVARCHAR2(510),
    id_userjustificator   INTEGER
);

ALTER TABLE processed_task_history ADD CONSTRAINT atask_change_history_pk PRIMARY KEY ( id );

CREATE SEQUENCE pt_history_id_seq;

CREATE TRIGGER processed_task_history_ai
BEFORE INSERT ON processed_task_history
FOR EACH ROW
BEGIN
  SELECT pt_history_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE province (
    id          INTEGER NOT NULL,
    name        NVARCHAR2(255) NOT NULL,
    id_region   INTEGER NOT NULL
);

ALTER TABLE province ADD CONSTRAINT province_pk PRIMARY KEY ( id );

CREATE SEQUENCE province_id_seq;

CREATE TRIGGER province_ai
BEFORE INSERT ON province
FOR EACH ROW
BEGIN
  SELECT province_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE region (
    id     INTEGER NOT NULL,
    name   NVARCHAR2(255) NOT NULL
);

ALTER TABLE region ADD CONSTRAINT region_pk PRIMARY KEY ( id );

CREATE SEQUENCE region_id_seq;

CREATE TRIGGER region_ai
BEFORE INSERT ON region
FOR EACH ROW
BEGIN
  SELECT region_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE role (
    id     INTEGER NOT NULL,
    name   NVARCHAR2(64) NOT NULL
);

ALTER TABLE role ADD CONSTRAINT role_pk PRIMARY KEY ( id );

CREATE SEQUENCE role_id_seq;

CREATE TRIGGER role_ai
BEFORE INSERT ON role
FOR EACH ROW
BEGIN
  SELECT role_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE role_permissions (
    id_role     INTEGER NOT NULL,
    id_permission   INTEGER NOT NULL
);

ALTER TABLE role_permissions ADD CONSTRAINT role_permissions_pk PRIMARY KEY ( id_role,
                                                                              id_permission );

CREATE TABLE task (
    id               INTEGER NOT NULL,
    name             NVARCHAR2(255) NOT NULL,
    description      NVARCHAR2(510) NOT NULL,
    ispredefinided   CHAR(1) NOT NULL
);

ALTER TABLE task ADD CONSTRAINT tasks_pk PRIMARY KEY ( id );

CREATE SEQUENCE task_id_seq;

CREATE TRIGGER task_ai
BEFORE INSERT ON task
FOR EACH ROW
BEGIN
  SELECT task_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE task_assignment (
    id                INTEGER NOT NULL,
    id_task           INTEGER NOT NULL,
    id_assigneruser   INTEGER NOT NULL,
    id_receiveruser   INTEGER
);

ALTER TABLE task_assignment ADD CONSTRAINT task_assignment_pk PRIMARY KEY ( id );

CREATE SEQUENCE task_assignment_id_seq;

CREATE TRIGGER task_assignment_ai
BEFORE INSERT ON task_assignment
FOR EACH ROW
BEGIN
  SELECT task_assignment_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE task_status (
    id       INTEGER NOT NULL,
    status   NVARCHAR2(255) NOT NULL
);

ALTER TABLE task_status ADD CONSTRAINT task_status_pk PRIMARY KEY ( id );

CREATE SEQUENCE task_status_id_seq;

CREATE TRIGGER task_status_ai
BEFORE INSERT ON task_status
FOR EACH ROW
BEGIN
  SELECT task_status_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE user_info (
    id                 INTEGER NOT NULL,
    firstname          NVARCHAR2(255) NOT NULL,
    lastname           NVARCHAR2(255) NOT NULL,
    address            NVARCHAR2(255) NOT NULL,
    phone              VARCHAR2(20) NOT NULL,
    birthdate          DATE NOT NULL,
    email              NVARCHAR2(255) NOT NULL,
    password           NVARCHAR2(512) NOT NULL,
    id_commune         INTEGER NOT NULL,
    id_assigned_unit   INTEGER NOT NULL,
    id_company         INTEGER,
    id_gender          INTEGER NOT NULL
);


CREATE UNIQUE INDEX email__idx ON
    user_info (
        email
    ASC );

ALTER TABLE user_info ADD CONSTRAINT user_pk PRIMARY KEY ( id );

CREATE SEQUENCE user_id_seq;

CREATE TRIGGER user_ai
BEFORE INSERT ON user_info
FOR EACH ROW
BEGIN
  SELECT user_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
CREATE TABLE workingarea (
    id     INTEGER NOT NULL,
    name   NVARCHAR2(255) NOT NULL
);

ALTER TABLE workingarea ADD CONSTRAINT workingarea_pk PRIMARY KEY ( id );

CREATE SEQUENCE workingarea_id_seq;

CREATE TRIGGER workingarea_ai
BEFORE INSERT ON workingarea
FOR EACH ROW
BEGIN
  SELECT workingarea_id_seq.nextval
  INTO :new.id
  FROM dual;
END;
/
ALTER TABLE processed_task
    ADD CONSTRAINT assigned_task_proc_task_fk FOREIGN KEY ( id_task_assignment )
        REFERENCES task_assignment ( id );

ALTER TABLE processed_task
    ADD CONSTRAINT assigned_task_task_fk FOREIGN KEY ( id_taskstatus )
        REFERENCES task_status ( id );

ALTER TABLE assigned_unit
    ADD CONSTRAINT assigned_unit_assigned_role_fk FOREIGN KEY ( id_superior_unit )
        REFERENCES assigned_unit ( id );

ALTER TABLE assigned_unit
    ADD CONSTRAINT assigned_unit_company_fk FOREIGN KEY ( id_company )
        REFERENCES company ( id );

ALTER TABLE assigned_unit
    ADD CONSTRAINT assigned_unit_role_fk FOREIGN KEY ( id_internalunit )
        REFERENCES internal_unit ( id );

ALTER TABLE processed_task
    ADD CONSTRAINT assigntask_assigneruser_fk FOREIGN KEY ( id_superiorassignedtask )
        REFERENCES processed_task ( id );

ALTER TABLE processed_task
    ADD CONSTRAINT assigntask_assigntask_fkv1 FOREIGN KEY ( id_dependenttask )
        REFERENCES processed_task ( id );

ALTER TABLE processed_task_history
    ADD CONSTRAINT atask_change_history_user_fk FOREIGN KEY ( id_userjustificator )
        REFERENCES user_info ( id );

ALTER TABLE commune
    ADD CONSTRAINT commune_province_fk FOREIGN KEY ( id_province )
        REFERENCES province ( id );

ALTER TABLE company
    ADD CONSTRAINT company_commune_fk FOREIGN KEY ( id_commune )
        REFERENCES commune ( id );

ALTER TABLE company
    ADD CONSTRAINT company_workingarea_fk FOREIGN KEY ( id_workingarea )
        REFERENCES workingarea ( id );

ALTER TABLE province
    ADD CONSTRAINT id_region_fk FOREIGN KEY ( id_region )
        REFERENCES region ( id );

ALTER TABLE loop_task
    ADD CONSTRAINT loop_task_month_fk FOREIGN KEY ( id_task_assignment )
        REFERENCES task_assignment ( id );

ALTER TABLE loop_task_schedule
    ADD CONSTRAINT lt_schedule_day_of_week_fk FOREIGN KEY ( id_dayofweek )
        REFERENCES day_of_week ( id );

ALTER TABLE loop_task_schedule
    ADD CONSTRAINT lt_schedule_loop_task_fk FOREIGN KEY ( id_loop_task )
        REFERENCES loop_task ( id );

ALTER TABLE loop_task_schedule
    ADD CONSTRAINT lt_schedule_month_fk FOREIGN KEY ( id_month )
        REFERENCES month ( id );

ALTER TABLE processed_task
    ADD CONSTRAINT processed_task_lt_schedule_fk FOREIGN KEY ( id_scheduled_looptask )
        REFERENCES loop_task_schedule ( id );

ALTER TABLE internal_unit
    ADD CONSTRAINT role_internalunit_fk FOREIGN KEY ( id_role )
        REFERENCES role ( id );

ALTER TABLE role_permissions
    ADD CONSTRAINT rtype_permission_p_fk FOREIGN KEY ( id_permission )
        REFERENCES permission ( id );

ALTER TABLE role_permissions
    ADD CONSTRAINT rtype_permission_rt_fk FOREIGN KEY ( id_role )
        REFERENCES role ( id );

ALTER TABLE processed_task_history
    ADD CONSTRAINT table_18_assigned_task_fk FOREIGN KEY ( id_assignedtask )
        REFERENCES processed_task ( id );

ALTER TABLE task_assignment
    ADD CONSTRAINT task_assignment_fk FOREIGN KEY ( id_task )
        REFERENCES task ( id );

ALTER TABLE task_assignment
    ADD CONSTRAINT task_assignment_user_fk FOREIGN KEY ( id_assigneruser )
        REFERENCES user_info ( id );

ALTER TABLE task_assignment
    ADD CONSTRAINT task_receiver_user_fk FOREIGN KEY ( id_receiveruser )
        REFERENCES user_info ( id );

ALTER TABLE user_info
    ADD CONSTRAINT user_assigned_role_fk FOREIGN KEY ( id_assigned_unit )
        REFERENCES assigned_unit ( id );

ALTER TABLE user_info
    ADD CONSTRAINT user_commune_fk FOREIGN KEY ( id_commune )
        REFERENCES commune ( id );

ALTER TABLE user_info
    ADD CONSTRAINT user_company_fk FOREIGN KEY ( id_company )
        REFERENCES company ( id );

ALTER TABLE user_info
    ADD CONSTRAINT user_gender_fk FOREIGN KEY ( id_gender )
        REFERENCES gender ( id );